import Foundation

public enum Period {
    case week, month, year
}

public struct PlatformTransactionFees {
    public let fixed: Double
    public let percentage: Double

    public init(fixed: Double, percentage: Double) {
        self.fixed = fixed
        self.percentage = percentage
    }
}

public struct PlatformTransactions {
    public let volume: Int
    public let value: Double
    public let fees: PlatformTransactionFees

    public init(volume: Int, value: Double, fees: PlatformTransactionFees) {
        self.volume = volume
        self.value = value
        self.fees = fees
    }

    public func sumValue() -> Double {
        return volume > 0 ? value * Double(volume) : 0
    }

    public func averageValue() -> Double {
        return volume > 0 ? value / Double(volume) : 0
    }

    public func fixedCost() -> Double {
        return volume > 0 ? Double(volume) * fees.fixed : 0
    }

    public func variableCost() -> Double {
        return averageValue() > 0 ? (averageValue() * (fees.percentage / 100)) * Double(volume) : 0
    }

    public func sumCost() -> Double {
        return fixedCost() + variableCost()
    }

    public func profit() -> Double {
        return sumValue() - sumCost()
    }
}

public struct Result {
    public let name: String
    public let gross: Double
    public let cost: Double
    public let profit: Double
}

public enum CompareCriteria {
    case profit
    case transaction
    case subscription
}

public struct PaymentProcessor {
    public struct Configuration {
        public let name: String
        public let fees: (fixed: Double, percentage: Double, monthly: Double)
        public let rounding: Bool

        public init(name: String,
                    fees: (fixed: Double, percentage: Double, monthly: Double),
                    rounding: Bool = false) {
            self.name = name
            self.fees = fees
            self.rounding = rounding
        }
    }

    public static func calculate(config: Configuration, transactions: PlatformTransactions) -> Result {
        let gross = transactions.sumValue()
        let cost = transactions.sumCost()
        let profit = transactions.profit()

        return Result(
            name: config.name,
            gross: config.rounding ? roundToTwoDecimals(gross) : gross,
            cost: config.rounding ? roundToTwoDecimals(cost) : cost,
            profit: config.rounding ? roundToTwoDecimals(profit) : profit
        )
    }
}
